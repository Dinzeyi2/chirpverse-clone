
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vcywiyvbfrylffwfzsny.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjeXdpeXZiZnJ5bGZmd2Z6c255Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc0ODA3MDIsImV4cCI6MjA1MzA1NjcwMn0.rZUZjLf4j6h0lhl53PhKJ0eARsBXdmlPOtIAHTJQxNE";

// Simple client configuration with longer timeouts and better retry logic
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: (url: RequestInfo | URL, options?: RequestInit) => {
      return fetch(url, options);
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10 // Increased from 5 to 10 for more responsive updates
    }
  }
});

// Testing Supabase connectivity
supabase.from('profiles').select('id').limit(1).then(({ data, error }) => {
  if (error) {
    console.error('Error connecting to Supabase:', error);
  } else {
    console.info('Supabase is connected. Sample data:', data);
  }
});

// Improved realtime activation with proper error handling
export const enableRealtimeForTables = () => {
  try {
    // Subscribe to all relevant tables for engagement data
    const channel = supabase.channel('public:realtime')
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'shoutouts' 
      }, (payload) => {
        console.log('Shoutout change detected:', payload);
        
        // If a new post is created, check for language mentions
        if (payload.eventType === 'INSERT' && payload.new) {
          const content = payload.new.content;
          console.log('Checking for language mentions in new post:', content);
          
          const languages = extractLanguageMentions(content);
          
          if (languages.length > 0) {
            console.log('Languages mentioned in new post:', languages);
            notifyLanguageUsers(
              payload.new.user_id, 
              languages, 
              content, 
              payload.new.id
            );
          } else {
            console.log('No language mentions found in post');
          }
        }
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'comments' 
      }, (payload) => {
        console.log('Comment change detected:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'post_reactions' 
      }, (payload) => {
        console.log('Reaction change detected:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'comment_reactions' 
      }, (payload) => {
        console.log('Comment reaction change detected:', payload);
      })
      .subscribe((status) => {
        console.log('Realtime subscription status:', status);
      });
      
    return channel;
  } catch (err) {
    console.error('Error setting up realtime:', err);
    return null;
  }
};

// Helper functions for array handling
export const prepareArrayField = (field: string[]): string => {
  return JSON.stringify(field);
};

export const parseArrayField = (field: string | null): string[] => {
  if (!field) return [];
  try {
    const parsed = JSON.parse(field);
    return Array.isArray(parsed) ? parsed : [field];
  } catch (error) {
    return [field];
  }
};

// Improved language mention extraction - Now correctly extracts @language tags
export const extractLanguageMentions = (content: string): string[] => {
  if (!content) return [];
  
  console.log('Extracting language mentions from content:', content);
  
  // Enhanced regex to match @language mentions more accurately
  const mentionRegex = /@(\w+)/g;
  const matches = [];
  let match;
  
  while ((match = mentionRegex.exec(content)) !== null) {
    if (match[1]) {
      const language = match[1].toLowerCase().trim();
      console.log('Found language mention:', language);
      matches.push(language);
    }
  }
  
  console.log('All extracted language mentions:', matches);
  
  return matches;
};

// Completely revamped notification system to ensure emails are sent properly
export const notifyLanguageUsers = async (
  senderId: string, 
  languages: string[], 
  postContent: string, 
  postId: string
): Promise<void> => {
  try {
    console.log(`Starting notification process for languages: ${languages.join(', ')} in post ${postId}`);
    
    // Call the Supabase function to process email notifications immediately with enhanced debugging
    console.log('Invoking send-language-notifications function...');
    
    const { data, error } = await supabase.functions.invoke('send-language-notifications', {
      body: { 
        postId,
        languages, // Pass the detected languages explicitly 
        content: postContent, // Pass the content for context
        immediate: true, // Flag to indicate this should be processed immediately
        debug: true // Enable debug mode for more verbose logging
      }
    });
    
    if (error) {
      console.error('Error invoking send-language-notifications function:', error);
    } else {
      console.log('Email notifications triggered successfully:', data);
    }
    
    // Separately prepare in-app notifications for immediate feedback
    for (const language of languages) {
      try {
        console.log(`Finding users interested in ${language}...`);
        
        // Find users with this language in their profile
        const { data: profilesWithLanguage, error: profilesError } = await supabase
          .from('profiles')
          .select('user_id, programming_languages, email, email_notifications_enabled')
          .not('user_id', 'eq', senderId) // Don't notify the author
          .eq('email_notifications_enabled', true); // Only fetch profiles with notifications enabled
        
        if (profilesError) {
          console.error(`Error fetching profiles for language ${language}:`, profilesError);
          continue;
        }
        
        console.log(`Found ${profilesWithLanguage?.length || 0} profiles with notifications enabled`);
        
        // Filter users who have the tagged language
        const usersToNotify = profilesWithLanguage?.filter(profile => {
          const userLanguages = Array.isArray(profile.programming_languages) 
            ? profile.programming_languages 
            : parseArrayField(profile.programming_languages as any);
          
          // Case insensitive check to match languages
          const hasLanguage = userLanguages.some(lang => 
            lang.toLowerCase() === language.toLowerCase()
          );
          
          console.log(`User ${profile.user_id} has languages: ${userLanguages.join(', ')}`);
          console.log(`User ${profile.user_id} has ${language}? ${hasLanguage}`);
          
          return hasLanguage;
        }) || [];
        
        console.log(`Found ${usersToNotify.length} users to notify about ${language}`);
        
        if (usersToNotify.length === 0) continue;
        
        // Prepare notifications for database insertion
        const notifications = usersToNotify.map(profile => ({
          type: 'language_mention',
          recipient_id: profile.user_id,
          sender_id: senderId,
          content: `mentioned ${language} in a post`,
          metadata: {
            language,
            post_id: postId,
            post_excerpt: postContent.substring(0, 100) + (postContent.length > 100 ? '...' : '')
          },
          is_read: false
        }));
        
        // Insert notifications into the database
        if (notifications.length > 0) {
          console.log(`Inserting ${notifications.length} notification records...`);
          
          const { error: notificationError } = await supabase
            .from('notifications')
            .insert(notifications);
            
          if (notificationError) {
            console.error('Error creating notifications:', notificationError);
          } else {
            console.log(`Successfully created ${notifications.length} notifications`);
          }
        }
      } catch (langError) {
        console.error(`Error processing notifications for language ${language}:`, langError);
      }
    }
  } catch (error) {
    console.error('Error in notifyLanguageUsers:', error);
  }
};
