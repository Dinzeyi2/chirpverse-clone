
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vcywiyvbfrylffwfzsny.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjeXdpeXZiZnJ5bGZmd2Z6c255Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc0ODA3MDIsImV4cCI6MjA1MzA1NjcwMn0.rZUZjLf4j6h0lhl53PhKJ0eARsBXdmlPOtIAHTJQxNE";

// Simple client configuration with longer timeouts and better retry logic
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: (url: RequestInfo | URL, options?: RequestInit) => {
      return fetch(url, options);
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10 // Increased from 5 to 10 for more responsive updates
    }
  }
});

// Testing Supabase connectivity
supabase.from('profiles').select('id').limit(1).then(({ data, error }) => {
  if (error) {
    console.error('Error connecting to Supabase:', error);
  } else {
    console.info('Supabase is connected. Sample data:', data);
  }
});

// Improved realtime activation with proper error handling
export const enableRealtimeForTables = () => {
  try {
    // Subscribe to all relevant tables for engagement data
    const channel = supabase.channel('public:realtime')
      .on('postgres_changes', { 
        event: 'INSERT', 
        schema: 'public', 
        table: 'shoutouts' 
      }, (payload) => {
        console.log('New shoutout detected:', payload);
        
        // If a new post is created, check for language mentions in the content
        if (payload.new) {
          const content = payload.new.content;
          console.log('Checking for programming languages in content:', content);
          
          // Extract programming languages mentioned in content
          const languages = extractLanguageMentions(content);
          
          if (languages.length > 0) {
            console.log('Programming languages found in post:', languages);
            // Directly call the function to send notifications
            notifyUsersWithSameLanguages(
              payload.new.user_id, 
              languages, 
              content, 
              payload.new.id
            ).then(() => {
              console.log('Notification function completed');
            }).catch(err => {
              console.error('Error in notification process:', err);
            });
          } else {
            console.log('No programming languages found in post content');
          }
        }
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'comments' 
      }, (payload) => {
        console.log('Comment change detected:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'post_reactions' 
      }, (payload) => {
        console.log('Reaction change detected:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'comment_reactions' 
      }, (payload) => {
        console.log('Comment reaction change detected:', payload);
      })
      .subscribe((status) => {
        console.log('Realtime subscription status:', status);
      });
      
    return channel;
  } catch (err) {
    console.error('Error setting up realtime:', err);
    return null;
  }
};

// Helper functions for array handling
export const prepareArrayField = (field: string[]): string => {
  return JSON.stringify(field);
};

export const parseArrayField = (field: string | null): string[] => {
  if (!field) return [];
  try {
    const parsed = JSON.parse(field);
    return Array.isArray(parsed) ? parsed : [field];
  } catch (error) {
    return [field];
  }
};

// Improved function to extract programming languages from post content
export const extractLanguageMentions = (content: string): string[] => {
  if (!content) return [];
  
  console.log('Scanning post content for programming languages');
  
  // List of common programming languages to check for
  const commonLanguages = [
    'javascript', 'typescript', 'python', 'java', 'c#', 'csharp', 'c\\+\\+', 'cpp', 
    'php', 'go', 'ruby', 'swift', 'kotlin', 'rust', 'dart', 'scala', 'r', 
    'perl', 'haskell', 'lua', 'sql', 'html', 'css', 'react', 'vue', 'angular',
    'node', 'nodejs', 'express', 'nextjs', 'flutter', 'svelte', 'django', 'rails',
    'pl/sql', 'plsql'
  ];
  
  const matches = new Set<string>();
  
  // Scan content for programming language mentions (case insensitive)
  commonLanguages.forEach(language => {
    try {
      // Use word boundaries for more accurate matching
      const regex = new RegExp(`\\b${language}\\b`, 'i');
      if (regex.test(content.toLowerCase())) {
        console.log(`Found programming language: ${language}`);
        // Normalize language name for consistency
        if (language === 'c\\+\\+' || language === 'cpp') {
          matches.add('c++');
        } else if (language === 'csharp') {
          matches.add('c#');
        } else if (language === 'plsql' || language === 'pl/sql') {
          matches.add('pl/sql');
        } else {
          matches.add(language.toLowerCase());
        }
      }
    } catch (error) {
      console.error(`Error with regex for language ${language}:`, error);
    }
  });
  
  const uniqueMatches = Array.from(matches);
  console.log('Programming languages found in content:', uniqueMatches);
  
  return uniqueMatches;
};

// Enhanced function to notify users who have the same programming languages
export const notifyUsersWithSameLanguages = async (
  senderId: string, 
  languages: string[], 
  postContent: string, 
  postId: string
): Promise<void> => {
  try {
    console.log(`Finding users who have selected these programming languages: ${languages.join(', ')}`);
    
    // Only proceed if languages were found in the post
    if (languages.length === 0) {
      console.log('No programming languages to notify about');
      return;
    }
    
    // Log that we're going to call the notification function
    console.log('Calling send-language-notifications edge function with:', {
      postId,
      languages,
      content: postContent.substring(0, 50) + '...'
    });
    
    // Make a direct call to our edge function
    const { data, error } = await supabase.functions.invoke('send-language-notifications', {
      body: { 
        postId,
        languages,
        content: postContent,
        immediate: true,
        debug: true
      }
    });
    
    if (error) {
      console.error('Error invoking notification function:', error);
    } else {
      console.log('Notification function response:', data);
    }

    // Also manually trigger email notifications for testing
    try {
      // Get users with matching programming languages
      const { data: users, error: userError } = await supabase
        .from('profiles')
        .select('user_id, email, programming_languages, email_notifications_enabled, full_name')
        .eq('email_notifications_enabled', true)
        .not('user_id', 'eq', senderId);

      if (userError) {
        console.error('Error fetching users:', userError);
        return;
      }

      console.log(`Found ${users?.length || 0} users with notifications enabled`);
      
      if (users && users.length > 0) {
        // Log all users for debugging
        users.forEach(user => {
          console.log(`User ${user.user_id} (${user.full_name || 'unnamed'}) - Email: ${user.email}`);
          console.log(`Programming languages:`, user.programming_languages);
        });
        
        // Find users with matching languages
        const matchingUsers = users.filter(user => {
          // Parse programming languages
          let userLanguages: string[] = [];
          
          if (user.programming_languages) {
            if (Array.isArray(user.programming_languages)) {
              userLanguages = user.programming_languages;
            } else if (typeof user.programming_languages === 'string') {
              try {
                userLanguages = JSON.parse(user.programming_languages);
              } catch {
                userLanguages = [user.programming_languages];
              }
            }
          }
          
          // Convert to lowercase for case-insensitive comparison
          const userLangsLower = userLanguages.map(l => l.toLowerCase());
          
          // Check if any language matches
          const hasMatch = languages.some(lang => 
            userLangsLower.includes(lang.toLowerCase())
          );
          
          console.log(`User ${user.user_id} has matching languages: ${hasMatch}`);
          
          return hasMatch;
        });
        
        console.log(`Found ${matchingUsers.length} users with matching languages`);
        
        // Send a test email to each matching user
        for (const user of matchingUsers) {
          if (user.email) {
            console.log(`Attempting to send direct email notification to ${user.email}`);
            
            // Prepare the languages list for the subject
            const languageList = languages.join(', ');
            
            // Send direct email notification
            const { data: emailData, error: emailError } = await supabase.functions.invoke('send-email-notification', {
              body: {
                userId: user.user_id,
                subject: `New post about programming languages you know: ${languageList}`,
                body: `Someone just posted about programming languages you're interested in: ${languageList}. Check it out!

"${postContent.substring(0, 150)}${postContent.length > 150 ? '...' : ''}"`,
                postId: postId,
                priority: 'high',
                debug: true
              }
            });
            
            if (emailError) {
              console.error(`Error sending email to ${user.email}:`, emailError);
            } else {
              console.log(`Email sent to ${user.email}:`, emailData);
            }
          }
        }
      }
    } catch (err) {
      console.error('Error in backup notification process:', err);
    }
  } catch (error) {
    console.error('Error in notifyUsersWithSameLanguages:', error);
  }
};
