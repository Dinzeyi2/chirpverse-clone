
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "https://vcywiyvbfrylffwfzsny.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjeXdpeXZiZnJ5bGZmd2Z6c255Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc0ODA3MDIsImV4cCI6MjA1MzA1NjcwMn0.rZUZjLf4j6h0lhl53PhKJ0eARsBXdmlPOtIAHTJQxNE";

// Simple client configuration with longer timeouts and better retry logic
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: (url: RequestInfo | URL, options?: RequestInit) => {
      return fetch(url, options);
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10 // Increased from 5 to 10 for more responsive updates
    }
  }
});

// Testing Supabase connectivity
supabase.from('profiles').select('id').limit(1).then(({ data, error }) => {
  if (error) {
    console.error('Error connecting to Supabase:', error);
  } else {
    console.info('Supabase is connected. Sample data:', data);
  }
});

// Listen for auth state changes to update user session status
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' && session?.user) {
    // Update user session when signed in
    // Use the REST API directly instead of the type-checked client
    fetch(`${SUPABASE_URL}/rest/v1/user_sessions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
        'Prefer': 'resolution=merge-duplicates'
      },
      body: JSON.stringify({
        user_id: session.user.id,
        last_active: new Date().toISOString(),
        is_online: true
      })
    }).catch(error => {
      console.error('Error updating user session on login:', error);
    });
  } else if (event === 'SIGNED_OUT') {
    // Handle sign out by marking user as offline
    const previousUser = session?.user;
    if (previousUser?.id) {
      // Use the REST API directly
      fetch(`${SUPABASE_URL}/rest/v1/user_sessions?user_id=eq.${previousUser.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'apikey': SUPABASE_PUBLISHABLE_KEY,
          'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
        },
        body: JSON.stringify({
          is_online: false
        })
      }).catch(error => {
        console.error('Error updating user session on logout:', error);
      });
    }
  }
});

// Set up beforeunload event to mark user as offline when closing browser
if (typeof window !== 'undefined') {
  window.addEventListener('beforeunload', () => {
    const currentUser = supabase.auth.getUser();
    currentUser.then(({ data }) => {
      if (data?.user) {
        // Using navigator.sendBeacon for more reliable delivery during page unload
        const payload = JSON.stringify({
          user_id: data.user.id,
          is_online: false
        });
        
        navigator.sendBeacon(
          `${SUPABASE_URL}/rest/v1/user_sessions?user_id=eq.${data.user.id}`, 
          new Blob([payload], { type: 'application/json' })
        );
      }
    });
  });
}

// Improved realtime activation with proper error handling
export const enableRealtimeForTables = () => {
  try {
    // Subscribe to all relevant tables for engagement data
    const channel = supabase.channel('public:realtime')
      .on('postgres_changes', { 
        event: 'INSERT', 
        schema: 'public', 
        table: 'shoutouts' 
      }, (payload) => {
        console.log('New shoutout detected:', payload);
        
        // If a new post is created, check for language mentions in the content
        if (payload.new) {
          const content = payload.new.content;
          console.log('Checking for programming languages in content:', content);
          
          // Extract programming languages mentioned in content
          const languages = extractLanguageMentions(content);
          
          if (languages.length > 0) {
            console.log('Programming languages found in post:', languages);
            // Directly call the function to send notifications
            notifyUsersWithSameLanguages(
              payload.new.user_id, 
              languages, 
              content, 
              payload.new.id
            ).then(() => {
              console.log('Notification function completed');
            }).catch(err => {
              console.error('Error in notification process:', err);
            });
          } else {
            console.log('No programming languages found in post content');
          }
        }
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'comments' 
      }, (payload) => {
        console.log('Comment change detected:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'post_reactions' 
      }, (payload) => {
        console.log('Reaction change detected:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public', 
        table: 'comment_reactions' 
      }, (payload) => {
        console.log('Comment reaction change detected:', payload);
      })
      .subscribe((status) => {
        console.log('Realtime subscription status:', status);
      });
      
    return channel;
  } catch (err) {
    console.error('Error setting up realtime:', err);
    return null;
  }
};

// Helper functions for array handling
export const prepareArrayField = (field: string[]): string => {
  return JSON.stringify(field);
};

export const parseArrayField = (field: string | null): string[] => {
  if (!field) return [];
  try {
    const parsed = JSON.parse(field);
    return Array.isArray(parsed) ? parsed : [field];
  } catch (error) {
    return [field];
  }
};

// Improved function to extract programming languages from post content
export const extractLanguageMentions = (content: string): string[] => {
  if (!content) return [];
  
  console.log('Scanning post content for programming languages');
  
  // List of common programming languages to check for
  const commonLanguages = [
    'javascript', 'typescript', 'python', 'java', 'c#', 'csharp', 'c\\+\\+', 'cpp', 
    'php', 'go', 'ruby', 'swift', 'kotlin', 'rust', 'dart', 'scala', 'r', 
    'perl', 'haskell', 'lua', 'sql', 'html', 'css', 'react', 'vue', 'angular',
    'node', 'nodejs', 'express', 'nextjs', 'flutter', 'svelte', 'django', 'rails',
    'pl/sql', 'plsql'
  ];
  
  const matches = new Set<string>();
  
  // Scan content for programming language mentions (case insensitive)
  commonLanguages.forEach(language => {
    try {
      // Use word boundaries for more accurate matching
      const regex = new RegExp(`\\b${language}\\b`, 'i');
      if (regex.test(content.toLowerCase())) {
        console.log(`Found programming language: ${language}`);
        // Normalize language name for consistency
        if (language === 'c\\+\\+' || language === 'cpp') {
          matches.add('c++');
        } else if (language === 'csharp') {
          matches.add('c#');
        } else if (language === 'plsql' || language === 'pl/sql') {
          matches.add('pl/sql');
        } else {
          matches.add(language.toLowerCase());
        }
      }
    } catch (error) {
      console.error(`Error with regex for language ${language}:`, error);
    }
  });
  
  const uniqueMatches = Array.from(matches);
  console.log('Programming languages found in content:', uniqueMatches);
  
  return uniqueMatches;
};

// Enhanced function to notify users who have the same programming languages
export const notifyUsersWithSameLanguages = async (
  senderId: string, 
  languages: string[], 
  postContent: string, 
  postId: string
): Promise<void> => {
  try {
    console.log(`Finding users who have selected these programming languages: ${languages.join(', ')}`);
    
    // Only proceed if languages were found in the post
    if (languages.length === 0) {
      console.log('No programming languages to notify about');
      return;
    }
    
    // Log that we're going to call the notification function
    console.log('Calling send-language-notifications edge function with:', {
      postId,
      languages,
      content: postContent.substring(0, 50) + '...',
      immediate: true,
      debug: true
    });
    
    // Make a direct call to our edge function with improved error handling
    const { data, error } = await supabase.functions.invoke('send-language-notifications', {
      body: { 
        postId,
        languages,
        content: postContent,
        immediate: true,
        debug: true
      }
    });
    
    if (error) {
      console.error('Error invoking notification function:', error);
    } else {
      console.log('Notification function response:', data);
    }
  } catch (error) {
    console.error('Error in notifyUsersWithSameLanguages:', error);
  }
};
