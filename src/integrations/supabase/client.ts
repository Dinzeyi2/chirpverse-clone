
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vcywiyvbfrylffwfzsny.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjeXdpeXZiZnJ5bGZmd2Z6c255Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc0ODA3MDIsImV4cCI6MjA1MzA1NjcwMn0.rZUZjLf4j6h0lhl53PhKJ0eARsBXdmlPOtIAHTJQxNE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add a helper function to enable realtime on tables we need
export const enableRealtimeForTables = () => {
  supabase.channel('schema-db-changes')
    .on('postgres_changes', { event: '*', schema: 'public', table: 'post_reactions' }, (payload) => {
      console.log('Reaction changes detected', payload);
    })
    .on('postgres_changes', { event: '*', schema: 'public', table: 'post_bludifies' }, (payload) => {
      console.log('Bludify changes detected', payload);
    })
    .on('postgres_changes', { event: '*', schema: 'public', table: 'post_bookmarks' }, (payload) => {
      console.log('Bookmark changes detected', payload);
    })
    .on('postgres_changes', { event: '*', schema: 'public', table: 'notifications' }, (payload) => {
      console.log('Notification changes detected', payload);
    })
    .on('postgres_changes', { event: '*', schema: 'public', table: 'profiles' }, (payload) => {
      console.log('Profile changes detected', payload);
    })
    .subscribe();
};

// Helper function to handle arrays or strings for profile fields
export const updateProfileField = async (userId: string, fieldName: 'field' | 'company', values: string[]) => {
  try {
    // Convert array to JSON string when saving to database
    const valueToSave = values.length > 0 ? JSON.stringify(values) : null;
    
    const { error } = await supabase
      .from('profiles')
      .update({ [fieldName]: valueToSave })
      .eq('user_id', userId);
      
    return { error };
  } catch (error) {
    console.error(`Error updating ${fieldName}:`, error);
    return { error };
  }
};

// Helper function to parse stored fields that might be JSON strings or simple strings
export const parseProfileField = (value: any): string[] => {
  if (!value) return [];
  
  // If it's already an array, return it
  if (Array.isArray(value)) return value;
  
  // Try to parse as JSON string
  try {
    const parsed = JSON.parse(value);
    return Array.isArray(parsed) ? parsed : [value];
  } catch (e) {
    // If not valid JSON, treat as a single string value
    return [value];
  }
};
