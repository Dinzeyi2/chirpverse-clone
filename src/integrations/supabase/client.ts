
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vcywiyvbfrylffwfzsny.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjeXdpeXZiZnJ5bGZmd2Z6c255Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc0ODA3MDIsImV4cCI6MjA1MzA1NjcwMn0.rZUZjLf4j6h0lhl53PhKJ0eARsBXdmlPOtIAHTJQxNE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Enhanced realtime activation with better logging
export const enableRealtimeForTables = () => {
  console.log('Enabling realtime for shoutouts table with improved handling...');
  
  // Create a dedicated channel just for shoutouts (posts)
  const shoutoutsChannel = supabase.channel('shoutouts-realtime')
    .on('postgres_changes', 
      { 
        event: 'INSERT', 
        schema: 'public', 
        table: 'shoutouts'
      }, 
      (payload) => {
        console.log('New shoutout detected in realtime:', payload);
        // This will trigger our listener in the usePosts hook
      }
    )
    .subscribe((status) => {
      console.log(`Shoutouts realtime connection status: ${status}`);
    });
    
  // Create a general channel for other tables
  supabase.channel('schema-db-changes')
    .on('postgres_changes', { event: '*', schema: 'public', table: 'post_reactions' }, (payload) => {
      console.log('Reaction changes detected', payload);
    })
    .on('postgres_changes', { event: '*', schema: 'public', table: 'post_bludifies' }, (payload) => {
      console.log('Bludify changes detected', payload);
    })
    .on('postgres_changes', { event: '*', schema: 'public', table: 'post_bookmarks' }, (payload) => {
      console.log('Bookmark changes detected', payload);
    })
    .on('postgres_changes', { event: '*', schema: 'public', table: 'notifications' }, (payload) => {
      console.log('Notification changes detected', payload);
    })
    .subscribe((status) => {
      console.log(`Realtime connection status: ${status}`);
    });
  
  return shoutoutsChannel;
};

// Helper function to convert arrays to JSON strings for Supabase storage
export const prepareArrayField = (field: string[]): string => {
  return JSON.stringify(field);
};

// Helper function to parse JSON strings from Supabase to arrays
export const parseArrayField = (field: string | null): string[] => {
  if (!field) return [];
  try {
    // Try to parse as JSON array
    const parsed = JSON.parse(field);
    return Array.isArray(parsed) ? parsed : [field];
  } catch (error) {
    // If it's not valid JSON, return it as a single item array
    return [field];
  }
};

// Function to find and extract programming language mentions from post content
export const extractLanguageMentions = (content: string): string[] => {
  // Regular expression to detect @language pattern
  const mentionRegex = /@(\w+)/g;
  
  // Find all matches
  const matches = [...content.matchAll(mentionRegex)];
  
  // Extract language names from matches
  return matches.map(match => match[1].toLowerCase().trim());
};

// Function to create a notification for users who have selected a specific programming language
export const notifyLanguageUsers = async (
  senderId: string, 
  language: string, 
  postContent: string, 
  postId: string
): Promise<void> => {
  try {
    // Find all users who have this programming language in their profile
    const { data: profilesWithLanguage, error: profilesError } = await supabase
      .from('profiles')
      .select('user_id, programming_languages')
      .not('user_id', 'eq', senderId); // Exclude the sender
    
    if (profilesError) {
      console.error('Error fetching profiles:', profilesError);
      return;
    }
    
    // Filter users who have the tagged language in their programming languages list
    const usersToNotify = profilesWithLanguage.filter(profile => {
      const languages = Array.isArray(profile.programming_languages) 
        ? profile.programming_languages 
        : parseArrayField(profile.programming_languages as any);
      
      return languages.some(lang => 
        lang.toLowerCase() === language.toLowerCase()
      );
    });
    
    console.log(`Found ${usersToNotify.length} users to notify for language: ${language}`);
    
    // Prepare notification data
    const notifications = usersToNotify.map(profile => ({
      type: 'language_mention',
      recipient_id: profile.user_id,
      sender_id: senderId,
      content: `mentioned ${language} in a post`,
      metadata: {
        language: language,
        post_id: postId,
        post_excerpt: postContent.substring(0, 100) + (postContent.length > 100 ? '...' : '')
      },
      is_read: false
    }));
    
    // Insert notifications
    if (notifications.length > 0) {
      const { error: notificationError } = await supabase
        .from('notifications')
        .insert(notifications);
      
      if (notificationError) {
        console.error('Error creating notifications:', notificationError);
      } else {
        console.log(`Created ${notifications.length} notifications for language: ${language}`);
      }
    }
  } catch (error) {
    console.error('Error in notifyLanguageUsers:', error);
  }
};
