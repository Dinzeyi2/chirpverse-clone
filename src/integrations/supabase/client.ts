
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vcywiyvbfrylffwfzsny.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjeXdpeXZiZnJ5bGZmd2Z6c255Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc0ODA3MDIsImV4cCI6MjA1MzA1NjcwMn0.rZUZjLf4j6h0lhl53PhKJ0eARsBXdmlPOtIAHTJQxNE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Enables realtime features for specified tables
 * @returns Supabase channel
 */
export const enableRealtimeForTables = () => {
  const tables = ['shoutouts', 'comments', 'post_reactions', 'comment_reactions'];
  
  try {
    console.log("Setting up realtime subscriptions for tables:", tables);
    
    const channel = supabase.channel('schema-db-changes')
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public',
        table: 'shoutouts' 
      }, payload => {
        console.log('Realtime shoutouts update:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public',
        table: 'comments' 
      }, payload => {
        console.log('Realtime comments update:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public',
        table: 'post_reactions' 
      }, payload => {
        console.log('Realtime reactions update:', payload);
      })
      .on('postgres_changes', { 
        event: '*', 
        schema: 'public',
        table: 'comment_reactions' 
      }, payload => {
        console.log('Realtime comment reactions update:', payload);
      })
      .subscribe();
      
    console.log("Realtime subscriptions set up successfully");
    return channel;
  } catch (error) {
    console.error("Error setting up realtime subscriptions:", error);
    throw error;
  }
};

/**
 * Extract programming language mentions from content
 * @param content Text to extract language mentions from
 * @returns Array of language names found
 */
export const extractLanguageMentions = (content: string): string[] => {
  if (!content) return [];
  
  // Common programming languages to detect
  const programmingLanguages = [
    'javascript', 'js', 'typescript', 'ts', 'python', 'py', 'ruby', 'java', 'c#', 'csharp',
    'php', 'go', 'golang', 'swift', 'kotlin', 'rust', 'scala', 'perl', 'r', 'dart',
    'haskell', 'lua', 'c++', 'cpp', 'c', 'bash', 'shell', 'sql', 'html', 'css',
    'react', 'angular', 'vue', 'svelte', 'node', 'express', 'django', 'flask',
    'rails', 'laravel', 'spring', 'dotnet', '.net', 'docker', 'kubernetes', 'k8s',
    'aws', 'azure', 'gcp', 'firebase'
  ];

  // Pattern to match mentions with @ symbol
  const mentionPattern = /@(\w+)/g;
  const mentions: string[] = [];
  let match;

  while ((match = mentionPattern.exec(content)) !== null) {
    const mention = match[1].toLowerCase();
    if (programmingLanguages.includes(mention)) {
      mentions.push(mention);
    }
  }

  // Also look for bare language names without @ symbol
  programmingLanguages.forEach(language => {
    // Use word boundaries to avoid partial matches
    const languagePattern = new RegExp(`\\b${language}\\b`, 'i');
    if (languagePattern.test(content) && !mentions.includes(language)) {
      mentions.push(language);
    }
  });

  return [...new Set(mentions)]; // Remove duplicates
};

/**
 * Notify users who are interested in the same programming languages
 * @param userId User ID of the post creator
 * @param languages Array of programming languages mentioned
 * @param content Post content
 * @param postId ID of the post
 */
export const notifyUsersWithSameLanguages = async (
  userId: string,
  languages: string[],
  content: string,
  postId: string
) => {
  if (!languages.length) return;
  
  try {
    console.log(`Finding users interested in: ${languages.join(', ')}`);
    
    // Find users who have these languages in their profile
    const { data: usersWithSameLanguages, error } = await supabase
      .from('profiles')
      .select('user_id, programming_languages, email_notifications_enabled')
      .not('user_id', 'eq', userId) // Exclude the post creator
      .filter('programming_languages', 'cs', `{${languages.join(',')}}`)
      .filter('email_notifications_enabled', 'eq', true);
      
    if (error) {
      console.error('Error finding users with matching languages:', error);
      return;
    }
    
    console.log(`Found ${usersWithSameLanguages?.length || 0} users with matching language interests`);
    
    // Create notifications for these users
    if (usersWithSameLanguages && usersWithSameLanguages.length > 0) {
      const notificationsToInsert = usersWithSameLanguages.map(user => ({
        recipient_id: user.user_id,
        sender_id: userId,
        type: 'language_mention',
        content: `New post about ${languages.join(', ')}`,
        metadata: {
          post_id: postId,
          languages: languages,
          preview: content.substring(0, 100) + (content.length > 100 ? '...' : '')
        }
      }));
      
      const { error: notificationError } = await supabase
        .from('notifications')
        .insert(notificationsToInsert);
        
      if (notificationError) {
        console.error('Error creating notifications:', notificationError);
      } else {
        console.log(`Created ${notificationsToInsert.length} notifications`);
      }
      
      // Call the edge function to send email notifications
      const { data, error: emailError } = await supabase.functions.invoke('send-language-notifications', {
        body: { 
          postId, 
          languages,
          content
        }
      });
      
      if (emailError) {
        console.error('Error invoking email notification function:', emailError);
      } else {
        console.log('Email notification function invoked:', data);
      }
    }
  } catch (err) {
    console.error('Error in notifyUsersWithSameLanguages:', err);
  }
};
