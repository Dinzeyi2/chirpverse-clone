
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// This function is meant to be called from a cron job
serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }
  
  try {
    console.log("Auto-post generator triggered at", new Date().toISOString());
    
    // Generate random delay between 5-8 minutes
    const minDelay = 5 * 60 * 1000; // 5 minutes
    const maxDelay = 8 * 60 * 1000; // 8 minutes
    const randomDelay = Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;
    
    console.log(`Next post will be generated in ${randomDelay/60000} minutes`);
    
    // Call the generate-coding-post function to create a new post
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Supabase credentials not set in environment variables');
    }
    
    // Call generate-coding-post endpoint with auto-generation flag
    const generateResponse = await fetch(
      `${supabaseUrl}/functions/v1/generate-coding-post`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${supabaseKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ autoGenerated: true })
      }
    );
    
    const result = await generateResponse.json();
    
    if (!generateResponse.ok) {
      throw new Error(`Failed to generate post: ${JSON.stringify(result)}`);
    }
    
    // Schedule the next post
    try {
      // Create Supabase client
      const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2.38.4');
      const supabase = createClient(supabaseUrl, supabaseKey);
      
      // Schedule next execution using pg_cron
      const { data: pgCronData, error: pgCronError } = await supabase.rpc('schedule_next_post', {
        minutes_delay: Math.round(randomDelay / 60000)
      });
      
      if (pgCronError) {
        throw pgCronError;
      }
      
      console.log("Scheduled next post:", pgCronData);
    } catch (schedulingError) {
      console.error("Error scheduling next post:", schedulingError);
      // Continue execution even if scheduling fails
    }
    
    return new Response(JSON.stringify({ 
      success: true, 
      message: "Post generated successfully",
      content: result.content,
      nextPostIn: randomDelay
    }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 200,
    });
  } catch (error) {
    console.error("Error in auto post generator:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
      status: 500,
    });
  }
});
